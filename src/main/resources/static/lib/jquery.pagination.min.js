;
(function($, window, document, undefined) {
	var defaults = {
        dataType: "JSON",
		totalData : 0,//数据总条数	
		showData : 0,//每页显示的条数
		pageCount :1,//总页数
		current : 1,//当前第几页
		prevCls : 'prev',//上一页class
		nextCls : 'next',//下一页class
		prevContent : '<',//上一页节点内容
		nextContent : '>',//下一页节点内容
		activeCls : 'active',//当前页选中状态class名
		coping : true,//是否开启首页和末页，值为boolean
		homePage : '首页',//首页节点内容，默认为空
		endPage : '末页',//尾页节点内容，默认为空
		count :1,//当前选中页前后页数
		jump : false,//是否开启跳转到指定页数，值为boolean类型
		jumpIptCls : 'jump-ipt',//文本框内容
		jumpBtnCls : 'jump-btn',//跳转按钮class
		jumpBtn : '确认',//跳转按钮文本内容
		callback : function(index) {
			//回调函数，参数"index"为当前页数
		},
		error: function(e) {
			
		},
	};
	var Pagination = function(element, options) {//options
		console.log("do Pagination");
		var opts = options, current, $document = $(document), $obj = $(element);
		
		//初始化
		this.init = function() {
			this.filling(opts.current);
			this.eventBind()
		};
		this.setTotalPage = function(page) {
			return opts.pageCount = page
		};
		
		//获取总页数
		this.getTotalPage = function() {
			var p = opts.totalData || opts.showData ? Math.ceil(parseInt(opts.totalData) / opts.showData):opts.pageCount;
			return p
		};
		//获取当前页
		this.getCurrent = function() {
			return current
		};
		//填充数据，参数为页数
		this.filling = function(index) {
			var html = '';
			current = index || opts.current;//当前页
			var pageCount = this.getTotalPage();
			if(pageCount>0&&current<(pageCount+1)){
				//开头判断
				if(pageCount>1){
					//上一页
					if (current >= opts.count * 2 && current != 1&& pageCount != opts.count) {
						var home = opts.coping && opts.homePage ? opts.homePage : '1';
						if(pageCount>5){
//							html += opts.coping?'<a class="home" href="javascript:;" data-page="1">'+home+'</a>':'';
						}
					}
					html+='<a href="javascript:;" class="' + opts.prevCls + '">'+opts.prevContent + '</a>';
				}
				//总页数小于5页
				if(pageCount<5){
					if(pageCount==1){
						html+='<span class="'+opts.activeCls+'">'+i+'</span>'
						return;
					}else{
						for(var i=1;i<pageCount+1;i++){
							if(current==i){
								html+='<span class="'+opts.activeCls+'">'+i+'</span>'
							}else{
								html+='<a href="javascript:;" data-page="'+i+'">'+i+'</a>';
							}
						}
					}
				}else{
					var start = current - opts.count, end = current + opts.count;
					((start > 1 && current < opts.count) || current == 1) && end++;
					(current > pageCount - opts.count && current >= pageCount)&& start++;
					
					if((current-opts.count)>3){
						html+='<a href="javascript:;" class="end" data-page="1">1</a><span>...</span>';
					}
					for (; start <= end; start++) {
						if (start <= pageCount && start >= 1) {
							if (start != current) {
								html += '<a href="javascript:;" data-page="'+start+'">'+start+'</a>'
							} else {
								if(start-2>1&&end>pageCount){
									//最后一页前几页显示
									var s2=start-2;
									var s1=start-1;
									html+='<a href="javascript:;" class="end" data-page="'+s2+'" >'+s2+'</a>';
									html+='<a href="javascript:;" class="end" data-page="'+s1+'">'+s1+'</a>';
								}
								html += '<span class="'+opts.activeCls+'">'+ start+'</span>'
							}
						}
					}
					if ((current + opts.count)<pageCount&&current>= 1&& pageCount > opts.count) {
						var end = opts.coping && opts.endPage ? opts.endPage: pageCount;
						if(pageCount>5){
							html += opts.coping?'<span>...</span><a href="javascript:;" class="end" data-page="'
									+ pageCount + '">' + pageCount + '</a>': '';
						}
					}
				}
				
				//结尾判断
				if(pageCount>1){
					//下一页
					html+='<a href="javascript:;" class="' + opts.nextCls + '">'+opts.nextContent + '</a>';
					//页码输入框
					html += opts.jump ? '<input type="text" class="'+opts.jumpIptCls+'"><a href="javascript:;" class="'+opts.jumpBtnCls+'">'+opts.jumpBtn+'</a>':'';
				}
				$obj.empty().html(html);
			}else{
				return ;
			}
		};
		this.eventBind = function() {
			var self = this;
			var pageCount = this.getTotalPage();
			//点击页码跳转
			$obj.off().on( 'click', 'a',function() {
				if ($(this).hasClass(opts.nextCls)) {//下一页按钮
					if(pageCount!=current){
						var index = parseInt($obj.find('.' + opts.activeCls).text()) + 1;
					}else{
						var index = current;
					}
				} else if ($(this).hasClass(opts.prevCls)) {//上一页按钮
					var index = parseInt($obj.find('.' + opts.activeCls).text()) - 1
					if(index==0){
						return;
					}
				} else if ($(this).hasClass(opts.jumpBtnCls)) {//确认跳转
					if ($obj.find('.' + opts.jumpIptCls).val() !== '') {
						var index = parseInt($obj.find('.' + opts.jumpIptCls).val())
					} else {
						$obj.find('.' + opts.jumpIptCls).focus();
						return
					}
				} else {
					var index = parseInt($(this).data('page'));//当前页数
				}
				self.filling(index);
				typeof opts.callback === 'function'&& opts.callback(index)
			});
			//输入页码跳转
			$obj.on('input propertychange', '.' + opts.jumpIptCls, function() {
				var $this = $(this);
				var val = $this.val();
				var reg = /[^\d]/g;
				if (reg.test(val)) {
					$this.val(val.replace(reg, ''))
				}
				(parseInt(val) > pageCount) && $this.val(pageCount);
				if (parseInt(val) === 0) {
					$this.val(1)
				}
			});
			$document.keydown(function(e) {
				var self = this;
				if (e.keyCode == 13&& $obj.find('.' + opts.jumpIptCls).val()) {
					var index = parseInt($obj.find('.' + opts.jumpIptCls).val());
					self.filling(index);
					typeof opts.callback === 'function'&& opts.callback(index)
				}
			});
		};
		this.init()
	};
	$.fn.pagination = function(parameter, callback) {
		if (typeof parameter == 'function') {
			callback = parameter;
			parameter = {}
		} else {
			parameter = parameter || {};
			callback = callback || function() {
			}
		}
		var options = $.extend({}, defaults, parameter);
		return this.each(function() {
			var pagination = new Pagination(this, options);
			callback(pagination)
		})
	}
})(jQuery, window, document);



//jQuery.fn.pagination = function(maxentries, opts){
//	opts = jQuery.extend({
//		items_per_page:10,
//		num_display_entries:10,
//		current_page:0,
//		num_edge_entries:0,
//		link_to:"#",
//		prev_text:"Prev",
//		next_text:"Next",
//		ellipse_text:"...",
//		prev_show_always:true,
//		next_show_always:true,
//		callback:function(){return false;}
//	},opts||{});
//	
//	return this.each(function() {
//		/**
//		 * 计算最大分页显示数目
//		 */
//		function numPages() {
//			return Math.ceil(maxentries/opts.items_per_page);
//		}	
//		/**
//		 * 极端分页的起始和结束点，这取决于current_page 和 num_display_entries.
//		 * @返回 {数组(Array)}
//		 */
//		function getInterval()  {
//			var ne_half = Math.ceil(opts.num_display_entries/2);
//			var np = numPages();
//			var upper_limit = np-opts.num_display_entries;
//			var start = current_page>ne_half?Math.max(Math.min(current_page-ne_half, upper_limit), 0):0;
//			var end = current_page>ne_half?Math.min(current_page+ne_half, np):Math.min(opts.num_display_entries, np);
//			return [start,end];
//		}
//		
//		/**
//		 * 分页链接事件处理函数
//		 * @参数 {int} page_id 为新页码
//		 */
//		function pageSelected(page_id, evt){
//			current_page = page_id;
//			drawLinks();
//			var continuePropagation = opts.callback(page_id, panel);
//			if (!continuePropagation) {
//				if (evt.stopPropagation) {
//					evt.stopPropagation();
//				}
//				else {
//					evt.cancelBubble = true;
//				}
//			}
//			return continuePropagation;
//		}
//		
//		/**
//		 * 此函数将分页链接插入到容器元素中
//		 */
//		function drawLinks() {
//			panel.empty();
//			var interval = getInterval();
//			var np = numPages();
//			// 这个辅助函数返回一个处理函数调用有着正确page_id的pageSelected。
//			var getClickHandler = function(page_id) {
//				return function(evt){ return pageSelected(page_id,evt); }
//			}
//			//辅助函数用来产生一个单链接(如果不是当前页则产生span标签)
//			var appendItem = function(page_id, appendopts){
//				page_id = page_id<0?0:(page_id<np?page_id:np-1); // 规范page id值
//				appendopts = jQuery.extend({text:page_id+1, classes:""}, appendopts||{});
//				if(page_id == current_page){
//					var lnk = jQuery("<span class='current'>"+(appendopts.text)+"</span>");
//				}else{
//					var lnk = jQuery("<a>"+(appendopts.text)+"</a>")
//						.bind("click", getClickHandler(page_id))
//						.attr('href', opts.link_to.replace(/__id__/,page_id));		
//				}
//				if(appendopts.classes){lnk.addClass(appendopts.classes);}
//				panel.append(lnk);
//			}
//			// 产生"Previous"-链接
//			if(opts.prev_text && (current_page > 0 || opts.prev_show_always)){
//				appendItem(current_page-1,{text:opts.prev_text, classes:"prev"});
//			}
//			// 产生起始点
//			if (interval[0] > 0 && opts.num_edge_entries > 0)
//			{
//				var end = Math.min(opts.num_edge_entries, interval[0]);
//				for(var i=0; i<end; i++) {
//					appendItem(i);
//				}
//				if(opts.num_edge_entries < interval[0] && opts.ellipse_text)
//				{
//					jQuery("<span>"+opts.ellipse_text+"</span>").appendTo(panel);
//				}
//			}
//			// 产生内部的些链接
//			for(var i=interval[0]; i<interval[1]; i++) {
//				appendItem(i);
//			}
//			// 产生结束点
//			if (interval[1] < np && opts.num_edge_entries > 0)
//			{
//				if(np-opts.num_edge_entries > interval[1]&& opts.ellipse_text)
//				{
//					jQuery("<span>"+opts.ellipse_text+"</span>").appendTo(panel);
//				}
//				var begin = Math.max(np-opts.num_edge_entries, interval[1]);
//				for(var i=begin; i<np; i++) {
//					appendItem(i);
//				}
//				
//			}
//			// 产生 "Next"-链接
//			if(opts.next_text && (current_page < np-1 || opts.next_show_always)){
//				appendItem(current_page+1,{text:opts.next_text, classes:"next"});
//			}
//		}
//		
//		//从选项中提取current_page
//		var current_page = opts.current_page;
//		//创建一个显示条数和每页显示条数值
//		maxentries = (!maxentries || maxentries < 0)?1:maxentries;
//		opts.items_per_page = (!opts.items_per_page || opts.items_per_page < 0)?1:opts.items_per_page;
//		//存储DOM元素，以方便从所有的内部结构中获取
//		var panel = jQuery(this);
//		// 获得附加功能的元素
//		this.selectPage = function(page_id){ pageSelected(page_id);}
//		this.prevPage = function(){ 
//			if (current_page > 0) {
//				pageSelected(current_page - 1);
//				return true;
//			}
//			else {
//				return false;
//			}
//		}
//		this.nextPage = function(){ 
//			if(current_page < numPages()-1) {
//				pageSelected(current_page+1);
//				return true;
//			}
//			else {
//				return false;
//			}
//		}
//		// 所有初始化完成，绘制链接
//		drawLinks();
//        // 回调函数
//        opts.callback(current_page, this);
//	});
//}
